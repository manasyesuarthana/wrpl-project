<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'My Contacts - JobTrek' %></title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/sidebar.css">
    <style>
        body {}
        .main-content-area { flex-grow: 1; padding: 20px; }
        .contact-card { /* specific styling */ }
        .alert-info { background-color: #0dcaf0; border-color: #0dcaf0; color: #000; }
        .alert-success { background-color: #198754; border-color: #198754; color: #fff; }
        .alert-danger { background-color: #dc3545; border-color: #dc3545; color: #fff; }
    </style>
</head>
<body class="text-bg-dark">

    <%- include("partials/header.ejs") %>

    <div class="d-flex flex-column flex-md-row">
        <div id="sidebar" class="d-flex flex-row flex-md-column flex-shrink-0 p-3 text-bg-dark w-100 w-md-auto">
            <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
                <img src="/asset/JobTrek_Logo_No_Title.svg" alt="JobTrek Logo" style="height: 40px;" class="me-2">
                <span class="fs-4">JobTrek</span>
            </a>
            <hr class="d-none d-md-block">
            <ul class="nav nav-pills flex-row flex-md-column mb-auto w-100 justify-content-around justify-content-md-start">
                <li class="nav-item">
                    <a href="/" class="nav-link text-white"> <%# Not active on contacts page %>
                        <i class="bi bi-house-door me-2"></i> Home
                    </a>
                </li>
                <li><a href="/reminders" class="nav-link text-white"><i class="bi bi-bell me-2"></i> Reminders</a></li>
                <li><a href="/contacts" class="nav-link active" aria-current="page"><i class="bi bi-people me-2"></i> Contacts</a></li> <%# Active link for Contacts %>
                <li><a href="/documents" class="nav-link text-white"><i class="bi bi-folder me-2"></i> Documents</a></li>
            </ul>
            <hr class="d-none d-md-block">
            <div class="sidebar-footer mt-auto pt-3"> 
                <button type="button" class="btn btn-danger w-100" data-bs-toggle="modal" data-bs-target="#signOutModal">
                    <i class="bi bi-box-arrow-right me-2"></i>Sign Out
                </button>
            </div>
        </div>

        <div class="main-content-area container-fluid mt-md-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="text-white"><i class="bi bi-people me-2"></i><%= typeof title !== 'undefined' ? title : 'My Contacts' %></h2>
                <a href="/contact-page" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>Add New Contact
                </a>
            </div>

            <div class="mb-4">
                <div class="input-group">
                    <span class="input-group-text bg-dark text-white border-secondary"><i class="bi bi-search"></i></span>
                    <input type="text" id="contact-search" class="form-control bg-dark text-white border-secondary" placeholder="Search by name, company, email..." aria-label="Search contacts">
                </div>
            </div>

            <div id="globalContactsMessage" class="mb-3 text-center"></div>
            <div class="row mt-3" id="contacts-container">
                <%# Contacts will be loaded here by JavaScript %>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteContactModal" tabindex="-1" aria-labelledby="deleteContactModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title" id="deleteContactModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="deleteContactModalBodyContent">
                    Are you sure you want to delete this contact?
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteContactButton">Delete Contact</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="signOutModal" tabindex="-1" aria-labelledby="signOutModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title" id="signOutModalLabel">Confirm Sign Out</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">Are you sure you want to sign out?</div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmSignOutButtonContacts" class="btn btn-danger">Sign Out</button> <%# Changed ID to avoid conflict if JS is page-specific %>
                </div>
            </div>
        </div>
    </div>

    <%- include("partials/footer.ejs") %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Sign Out Logic (from index.ejs, ID slightly adapted for this page if needed) ---
            const confirmSignOutBtnContacts = document.getElementById('confirmSignOutButtonContacts');
            if (confirmSignOutBtnContacts) {
                confirmSignOutBtnContacts.addEventListener('click', async () => {
                    try {
                        const response = await fetch('/api/v1/logout', {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const result = await response.json();
                        if (response.ok) {
                            window.location.href = '/login';
                        } else {
                            displayGlobalMessage('Logout failed: ' + (result.message || 'Server error'), 'danger', 'globalContactsMessage'); // Use correct message display
                        }
                    } catch (error) {
                        displayGlobalMessage('An error occurred during logout. Please try again.', 'danger', 'globalContactsMessage');
                    }
                });
            }

            // --- Contacts Logic ---
            const contactsContainer = document.getElementById("contacts-container");
            const deleteContactModalElement = document.getElementById('deleteContactModal');
            const confirmDeleteContactButton = document.getElementById('confirmDeleteContactButton');
            const searchInput = document.getElementById('contact-search');
            let contactEmailToDelete = null;
            let currentFetchedContacts = [];

            // Generic displayGlobalMessage function for this page
            function displayGlobalMessage(message, type = 'info', elementId = 'globalContactsMessage') {
                const messageDiv = document.getElementById(elementId);
                if (messageDiv) {
                    messageDiv.textContent = message;
                    messageDiv.className = `mb-3 text-center alert alert-${type} ${!message ? 'd-none' : ''}`;
                }
            }
            
            async function fetchAndRenderContacts() {
                // ... (same as my previous detailed suggestion for fetchAndRenderContacts)
                if (!contactsContainer) return;
                displayGlobalMessage("Loading contacts...", "info");
                contactsContainer.innerHTML = ''; 

                try {
                    const response = await fetch('/api/v1/contacts');
                    if (response.status === 401 || (response.status === 400 && (await response.clone().json()).message?.toLowerCase().includes('session'))) {
                        window.location.href = '/login';
                        return;
                    }
                    if (!response.ok) {
                        const errData = await response.json().catch(() => ({ message: `HTTP error ${response.status}` }));
                        throw new Error(errData.message || `Failed to fetch contacts (status: ${response.status})`);
                    }
                    const result = await response.json();

                    if (result.data && Array.isArray(result.data)) {
                        currentFetchedContacts = result.data; 
                        if (currentFetchedContacts.length > 0) {
                            renderContactsUI(currentFetchedContacts); 
                            displayGlobalMessage('');
                        } else {
                            contactsContainer.innerHTML = '<div class="col-12"><p class="text-white text-center">No contacts found. <a href="/contact-page">Add one now!</a></p></div>';
                            displayGlobalMessage('');
                        }
                    } else {
                        throw new Error("Invalid data format received from server for contacts.");
                    }
                } catch (error) {
                    console.error('Failed to fetch contacts:', error);
                    displayGlobalMessage(`Failed to load contacts: ${error.message}`, 'danger');
                    currentFetchedContacts = [];
                    contactsContainer.innerHTML = ''; 
                }
            }

            function renderContactsUI(contactsToRender) {
                // ... (same as my previous detailed suggestion for renderContactsUI)
                if (!contactsContainer) return;
                contactsContainer.innerHTML = ''; 
                
                if (!contactsToRender || contactsToRender.length === 0) {
                    if (searchInput && searchInput.value.trim()) {
                         contactsContainer.innerHTML = '<div class="col-12"><p class="text-white text-center">No contacts match your search.</p></div>';
                    } else {
                         contactsContainer.innerHTML = '<div class="col-12"><p class="text-white text-center">No contacts found.</p></div>';
                    }
                    return;
                }

                contactsToRender.forEach(contact => {
                    const card = document.createElement('div');
                    card.className = 'col-lg-4 col-md-6 mb-4 contact-card';
                    card.innerHTML = `
                        <div class="card bg-dark text-white border-light h-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">${contact.Name || 'N/A'}</h5>
                                <h6 class="card-subtitle mb-2 text-light">${contact.role || 'N/A'} at ${contact.company || 'N/A'}</h6>
                                <p class="card-text small">
                                    <i class="bi bi-envelope-fill me-1"></i> ${contact.contactEmail || 'N/A'}<br>
                                    <i class="bi bi-telephone-fill me-1"></i> ${contact.phoneNumber || 'N/A'}
                                    ${contact.linkedinProfile ? `<br><i class="bi bi-linkedin me-1"></i> <a href="${contact.linkedinProfile.startsWith('http') ? '' : '//'}${contact.linkedinProfile}" target="_blank" class="text-white">${contact.linkedinProfile}</a>` : ''}
                                </p>
                                <div class="mt-auto pt-2 d-flex justify-content-end">
                                    <button type="button" class="btn btn-sm btn-outline-danger delete-contact-btn"
                                            data-bs-toggle="modal" data-bs-target="#deleteContactModal"
                                            data-contact-email="${contact.contactEmail}"
                                            data-contact-name="${contact.Name || contact.contactEmail}">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    contactsContainer.appendChild(card);
                });
            }

            function filterAndRenderContactsUIFromSearch(searchTerm) {
                // ... (same as my previous detailed suggestion for filterAndRenderContactsUIFromSearch)
                const lowerSearchTerm = searchTerm.toLowerCase().trim();
                if (!lowerSearchTerm) {
                    renderContactsUI(currentFetchedContacts);
                    return;
                }
                const filteredContacts = currentFetchedContacts.filter(contact =>
                    (contact.Name || '').toLowerCase().includes(lowerSearchTerm) ||
                    (contact.company || '').toLowerCase().includes(lowerSearchTerm) ||
                    (contact.role || '').toLowerCase().includes(lowerSearchTerm) ||
                    (contact.contactEmail || '').toLowerCase().includes(lowerSearchTerm) ||
                    (contact.phoneNumber || '').toLowerCase().includes(lowerSearchTerm)
                );
                renderContactsUI(filteredContacts);
            }

            if (searchInput) {
                searchInput.addEventListener('input', (e) => {
                    filterAndRenderContactsUIFromSearch(e.target.value);
                });
            }
            
            // Delete Modal Logic (from your previous contacts.ejs)
            if (deleteContactModalElement) {
                deleteContactModalElement.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    if (button) {
                        contactEmailToDelete = button.getAttribute('data-contact-email');
                        const contactName = button.getAttribute('data-contact-name');
                        const modalBody = deleteContactModalElement.querySelector('#deleteContactModalBodyContent');
                        if (modalBody) {
                            modalBody.textContent = `Are you sure you want to delete the contact: ${contactName || contactEmailToDelete}?`;
                        }
                    }
                });

                deleteContactModalElement.addEventListener('hidden.bs.modal', function () {
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                });
            }

            if (confirmDeleteContactButton) {
                confirmDeleteContactButton.addEventListener('click', async () => {
                    // ... (same as your existing delete logic in contacts.ejs, ensuring it calls displayGlobalMessage and fetchAndRenderContacts)
                    if (!contactEmailToDelete) return;
                    displayGlobalMessage("Deleting contact...", "info");
                    try {
                        const response = await fetch('/api/v1/contacts', {
                            method: 'DELETE', 
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ contactEmail: contactEmailToDelete })
                        });
                        const result = await response.json();
                        if (response.ok) {
                            displayGlobalMessage(result.message || 'Contact deleted successfully!', 'success');
                            fetchAndRenderContacts(); 
                        } else {
                            displayGlobalMessage(`Deletion failed: ${result.message || response.statusText}`, 'danger');
                        }
                    } catch (error) {
                        console.error('Delete contact API error:', error);
                        displayGlobalMessage('An error occurred while deleting the contact.', 'danger');
                    } finally {
                        const modalInstance = bootstrap.Modal.getInstance(deleteContactModalElement);
                        if (modalInstance) modalInstance.hide();
                        contactEmailToDelete = null;
                    }
                });
            }
            fetchAndRenderContacts();
        });
    </script>
</body>
</html>