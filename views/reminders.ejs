<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Reminders - JobTrek</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/sidebar.css">
    <style>
        body {
            background-color: #212529; /* Ensure dark theme background */
        }
        .main-content-area { /* Renamed from 'main' to avoid conflict with <main> element, and for clarity */
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto; /* Allows content to scroll if it exceeds viewport height */
            height: calc(100vh - 56px); /* Adjust 56px if your header height is different */
        }
        .card {
            background-color: #343a40; /* Darker card background */
            border-color: #495057; /* Slightly lighter border for cards */
        }
        .card-title, .card-subtitle, .card-text, .form-label, .modal-title, .modal-body {
            color: #f8f9fa; /* Light text for readability */
        }
        .form-control, .form-select {
            background-color: #495057;
            color: #f8f9fa;
            border-color: #6c757d;
        }
        .form-control:focus, .form-select:focus {
            background-color: #495057;
            color: #f8f9fa;
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        .form-control::placeholder {
            color: #adb5bd;
        }
        .modal-content {
             background-color: #2c3034; /* Dark modal background */
        }
         .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
        /* Custom styles from your previous example */
        .shadow-danger-sm { box-shadow: 0 .125rem .25rem rgba(220, 53, 69, .4) !important; }
        .shadow-warning-sm { box-shadow: 0 .125rem .25rem rgba(255, 193, 7, .4) !important; }
        .shadow-success-sm { box-shadow: 0 .125rem .25rem rgba(25, 135, 84, .4) !important; }

        @media (min-width: 768px) {
          #sidebar {
            height: 100vh !important;
            position: sticky;
            top: 0;
          }
         .main-content-area {
             height: 100vh;
          }
        }
         @media (max-width: 767.98px) {
           #sidebar {
             height: auto !important;
             overflow-y: visible;
           }
          .main-content-area {
             height: auto;
           }
        }
    </style>
</head>
<body class="text-bg-dark">

    <%- include('partials/header.ejs') %>

    <div class="d-flex flex-column flex-md-row">
        <div id="sidebar" class="d-flex flex-row flex-md-column flex-shrink-0 p-3 text-bg-dark">
            <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
                <img src="/asset/JobTrek_Logo_No_Title.svg" alt="JobTrek Logo" style="height: 40px;" class="me-2">
                <span class="fs-4">JobTrek</span> </a>
            <hr class="d-none d-md-block">
            <ul class="nav nav-pills flex-row flex-md-column mb-auto w-100 justify-content-around justify-content-md-start">
                <li class="nav-item">
                    <a href="/" class="nav-link text-white">
                        <i class="bi bi-house-door me-2"></i> Home
                    </a>
                </li>
                <li><a href="/reminders" class="nav-link active" aria-current="page"><i class="bi bi-bell me-2"></i> Reminders</a></li>
                <li><a href="/contacts" class="nav-link text-white"><i class="bi bi-people me-2"></i> Contacts</a></li>
                <li><a href="/documents" class="nav-link text-white"><i class="bi bi-folder me-2"></i> Documents</a></li>
            </ul>
            <hr class="d-none d-md-block">
            <div class="sidebar-footer mt-auto pt-3">
                 <button type="button" class="btn btn-danger w-100" data-bs-toggle="modal" data-bs-target="#signOutModal">
                    <i class="bi bi-box-arrow-right me-2"></i>Sign Out
                </button>
            </div>
        </div>

        <div class="main-content-area">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="text-white"><i class="bi bi-bell me-2"></i>My Reminders</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addReminderModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Reminder
                    </button>
                </div>

                <div class="mb-4">
                    <div class="input-group">
                        <span class="input-group-text bg-dark text-white border-secondary" id="search-addon"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="reminderSearchInput" placeholder="Search reminders by title or notes..." aria-label="Search reminders" aria-describedby="search-addon">
                    </div>
                </div>
                
                <div id="apiMessage" class="mb-3"></div> <div id="remindersList" class="row">
                    </div>
                <p id="noRemindersText" class="text-white-50 col-12 text-center py-5 fs-5" style="display: none;">
                    <i class="fas fa-folder-open fa-3x mb-3 d-block"></i>
                    No reminders yet. <br>Click "Add Reminder" to get started!
                </p>
            </div>
        </div>
    </div>

    <div class="modal fade" id="addReminderModal" tabindex="-1" aria-labelledby="addReminderModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title" id="addReminderModalLabel">Add New Reminder</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="reminderForm">
                        <div class="mb-3">
                            <label for="reminderTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="reminderTitle" name="title" required>
                            <div class="invalid-feedback" id="titleError"></div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="reminderDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="reminderDate" name="date" required>
                                <div class="invalid-feedback" id="dateError"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="reminderTime" class="form-label">Time</label>
                                <input type="time" class="form-control" id="reminderTime" name="time" required>
                                 <div class="invalid-feedback" id="timeError"></div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="reminderPriority" class="form-label">Priority</label>
                            <select class="form-select" id="reminderPriority" name="priority">
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                            </select>
                            <div class="invalid-feedback" id="priorityError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="reminderNotes" class="form-label">Notes</label>
                            <textarea class="form-control" id="reminderNotes" name="notes" rows="3"></textarea>
                             <div class="invalid-feedback" id="notesError"></div>
                        </div>
                         <div id="modalFormError" class="text-danger mt-2"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveReminderButton">Save Reminder</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="signOutModal" tabindex="-1" aria-labelledby="signOutModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title" id="signOutModalLabel">Confirm Sign Out</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">Are you sure you want to sign out?</div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmSignOutButton">Sign Out</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content text-bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="deleteReminderModalBodyContent">
                    Are you sure you want to delete this reminder? This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteReminderButton">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <%- include('partials/footer.ejs') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const reminderForm = document.getElementById('reminderForm');
        const saveReminderButton = document.getElementById('saveReminderButton');
        const remindersListDiv = document.getElementById('remindersList');
        const noRemindersText = document.getElementById('noRemindersText');
        const reminderSearchInput = document.getElementById('reminderSearchInput');
        
        const addReminderModalEl = document.getElementById('addReminderModal');
        const addReminderBsModal = new bootstrap.Modal(addReminderModalEl);
        
        const deleteConfirmModalEl = document.getElementById('deleteConfirmModal');
        const deleteConfirmBsModal = new bootstrap.Modal(deleteConfirmModalEl);
        const confirmDeleteReminderButton = document.getElementById('confirmDeleteReminderButton');
        const deleteReminderModalBody = document.getElementById('deleteReminderModalBodyContent');
        
        const confirmSignOutButton = document.getElementById('confirmSignOutButton');
        const signOutModalEl = document.getElementById('signOutModal'); 

        const apiMessageDiv = document.getElementById('apiMessage');
        const modalFormErrorDiv = document.getElementById('modalFormError');

        let currentFetchedReminders = []; 
        let reminderIdToDelete = null;

        function cleanupModalEffects() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
        }

        if (addReminderModalEl) {
            addReminderModalEl.addEventListener('hidden.bs.modal', function () {
                cleanupModalEffects();
                resetForm(); 
            });
        }

        if (deleteConfirmModalEl) {
            deleteConfirmModalEl.addEventListener('hidden.bs.modal', function () {
                cleanupModalEffects();
            });
        }
        
        if (signOutModalEl) {
            signOutModalEl.addEventListener('hidden.bs.modal', function () {
                cleanupModalEffects();
            });
        }

        function displayApiMessage(message, type = 'info') {
            if(apiMessageDiv) {
                apiMessageDiv.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                                            ${escapeHTML(message)}
                                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                          </div>`;
            }
        }

        function clearModalValidationMessages() {
            document.getElementById("titleError").textContent = "";
            document.getElementById("dateError").textContent = "";
            document.getElementById("timeError").textContent = "";
            document.getElementById("priorityError").textContent = "";
            if(modalFormErrorDiv) modalFormErrorDiv.textContent = "";

            document.getElementById("reminderTitle").classList.remove('is-invalid');
            document.getElementById("reminderDate").classList.remove('is-invalid');
            document.getElementById("reminderTime").classList.remove('is-invalid');
            document.getElementById("reminderPriority").classList.remove('is-invalid');
        }

        function displayModalValidationErrors(errors) {
            clearModalValidationMessages();
            if (errors.title) {
                document.getElementById("titleError").textContent = errors.title.join(", ");
                document.getElementById("reminderTitle").classList.add('is-invalid');
            }
            if (errors.date) {
                document.getElementById("dateError").textContent = errors.date.join(", ");
                document.getElementById("reminderDate").classList.add('is-invalid');
            }
            if (errors.time) {
                document.getElementById("timeError").textContent = errors.time.join(", ");
                document.getElementById("reminderTime").classList.add('is-invalid');
            }
            if (errors.priority) { 
                document.getElementById("priorityError").textContent = errors.priority.join(", ");
                document.getElementById("reminderPriority").classList.add('is-invalid');
            }
             if (errors.notes) { // Added notes error handling just in case
                const notesErrorDiv = document.getElementById("notesError"); // Assuming it exists
                if(notesErrorDiv) notesErrorDiv.textContent = errors.notes.join(", ");
                document.getElementById("reminderNotes").classList.add('is-invalid');
            }
            if (errors.form && modalFormErrorDiv) { 
                modalFormErrorDiv.textContent = errors.form;
            }
        }
        
        function getPriorityClass(priority) {
            switch (priority) {
                case 'high': return 'border-danger shadow-danger-sm';
                case 'medium': return 'border-warning shadow-warning-sm';
                case 'low': return 'border-success shadow-success-sm';
                default: return 'border-secondary';
            }
        }

        function getPriorityBadgeClass(priority) {
             switch (priority) {
                case 'high': return 'bg-danger';
                case 'medium': return 'bg-warning text-dark';
                case 'low': return 'bg-success';
                default: return 'bg-secondary';
            }
        }

        function renderRemindersUI(remindersToRender) {
            remindersListDiv.innerHTML = '';
            if (remindersToRender.length === 0) {
                if (reminderSearchInput.value) {
                    noRemindersText.innerHTML = `<i class="fas fa-search fa-3x mb-3 d-block"></i>No reminders found matching your search for "<strong>${escapeHTML(reminderSearchInput.value)}</strong>".`;
                } else {
                    noRemindersText.innerHTML = '<i class="fas fa-folder-open fa-3x mb-3 d-block"></i>No reminders yet. <br>Click "Add Reminder" to get started!';
                }
                noRemindersText.style.display = 'block';
            } else {
                noRemindersText.style.display = 'none';
                remindersToRender.forEach(reminder => {
                    const dateText = new Date(reminder.date + 'T00:00:00').toLocaleDateString(undefined, { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' });
                    const timeText = reminder.time ? new Date(`1970-01-01T${reminder.time}`).toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', hour12: true }) : '';
                    
                    const card = `
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 text-white ${getPriorityClass(reminder.priority)}">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">${escapeHTML(reminder.title)}</h5>
                                    <p class="card-subtitle mb-2 small text-white-50">
                                        <i class="fas fa-calendar-alt me-1"></i>${dateText}
                                        ${timeText ? ` <i class="fas fa-clock ms-2 me-1"></i>${timeText}` : ''}
                                    </p>
                                    <span class="badge ${getPriorityBadgeClass(reminder.priority)} mb-3 align-self-start">${escapeHTML(reminder.priority.charAt(0).toUpperCase() + reminder.priority.slice(1))} Priority</span>
                                    ${reminder.notes ? `<p class="card-text small flex-grow-1">${escapeHTML(reminder.notes).replace(/\n/g, '<br>')}</p>` : '<p class="card-text small flex-grow-1"><em>No notes.</em></p>'}
                                    <p class="card-text mt-auto pt-2"><small class="text-white-50">Added: ${new Date(reminder.createdAt).toLocaleString()}</small></p>
                                    <div class="mt-2">
                                        <button class="btn btn-sm btn-outline-danger delete-reminder-btn"
                                                data-reminder-id="${reminder.reminderId}"
                                                data-reminder-title="${escapeHTML(reminder.title)}">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    remindersListDiv.innerHTML += card;
                });
            }
        }

        async function fetchAndDisplayReminders() {
            displayApiMessage("Loading reminders...", "info");
            try {
                const response = await fetch('/api/v1/reminders');
                if (response.status === 401) {
                    window.location.href = '/login?message=Session expired. Please login again.';
                    return;
                }
                const result = await response.json();
                if (!response.ok) {
                    throw new Error(result.message || `HTTP error ${response.status}`);
                }
                console.log('Client-side: Data received from API /api/v1/reminders:', result.data);
                currentFetchedReminders = result.data || [];
                currentFetchedReminders.sort((a, b) => new Date(a.date) - new Date(b.date) || a.time.localeCompare(b.time));
                renderRemindersUI(currentFetchedReminders);
                if (apiMessageDiv.innerHTML.includes("Loading reminders...")) { // Clear only if it's the loading message
                    apiMessageDiv.innerHTML = ''; 
                }
            } catch (error) {
                console.error('Error fetching reminders:', error);
                displayApiMessage(`Failed to load reminders: ${error.message}`, 'danger');
                renderRemindersUI([]); 
            }
        }
        
        if (reminderSearchInput) {
             reminderSearchInput.addEventListener('input', () => {
                const searchTerm = reminderSearchInput.value.toLowerCase();
                const filtered = currentFetchedReminders.filter(r => 
                    (r.title && r.title.toLowerCase().includes(searchTerm)) ||
                    (r.notes && r.notes.toLowerCase().includes(searchTerm))
                );
                renderRemindersUI(filtered);
            });
        }
        
        function resetForm() {
            if(reminderForm) {
                reminderForm.reset();
                 // Set default priority after reset if needed, e.g., to medium
                const prioritySelect = document.getElementById('reminderPriority');
                if (prioritySelect) prioritySelect.value = 'medium';
            }
            clearModalValidationMessages();
        }
        
        // When the Add Reminder modal is opened, ensure form is reset
        if (addReminderModalEl) {
            addReminderModalEl.addEventListener('show.bs.modal', function() {
                resetForm();
                // Set the title for "Add New Reminder" specifically if it was changed by an edit flow (if edit is re-introduced)
                const modalTitle = document.getElementById('addReminderModalLabel');
                if(modalTitle) modalTitle.textContent = 'Add New Reminder';
            });
        }


        if (saveReminderButton) {
             saveReminderButton.addEventListener('click', async function () {
                clearModalValidationMessages();
                const payload = {
                    title: document.getElementById('reminderTitle').value.trim(),
                    date: document.getElementById('reminderDate').value,
                    time: document.getElementById('reminderTime').value,
                    notes: document.getElementById('reminderNotes').value.trim(),
                    priority: document.getElementById('reminderPriority').value
                };

                console.log('Client-side: Payload being sent to backend:', payload); 


                // Basic front-end validation (mirroring backend for better UX)
                let isValid = true;
                if (!payload.title) {
                    displayModalValidationErrors({ title: ["Title is required"] });
                    isValid = false;
                }
                if (!payload.date) {
                     displayModalValidationErrors({ ... (modalFormErrorDiv?.textContent ? {form: modalFormErrorDiv.textContent} : {}), date: ["Valid date is required"] });
                    isValid = false;
                }
                if (!payload.time) {
                    displayModalValidationErrors({... (modalFormErrorDiv?.textContent ? {form: modalFormErrorDiv.textContent} : {}), time: ["Time is required"] });
                    isValid = false;
                }
                 if (!payload.priority) {
                    displayModalValidationErrors({... (modalFormErrorDiv?.textContent ? {form: modalFormErrorDiv.textContent} : {}), priority: ["Priority is required"] });
                    isValid = false;
                }


                if (!isValid) return;


                try {
                    const response = await fetch('/api/v1/reminders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();
                    if (!response.ok) {
                         if (response.status === 401) window.location.href = '/login';
                        if (result.details) { 
                            displayModalValidationErrors(result.details);
                        } else if (modalFormErrorDiv) {
                            modalFormErrorDiv.textContent = result.message || 'Failed to save reminder.';
                        }
                        throw new Error(result.message || 'Failed to save reminder.');
                    }
                    displayApiMessage(result.message || 'Reminder saved successfully!', 'success');
                    addReminderBsModal.hide(); // This will trigger 'hidden.bs.modal' which calls resetForm
                    fetchAndDisplayReminders();
                } catch (error) {
                    console.error('Error saving reminder:', error);
                    if (modalFormErrorDiv && !modalFormErrorDiv.textContent && !document.querySelector('.is-invalid')) {
                         modalFormErrorDiv.textContent = error.message || 'An unexpected error occurred.';
                    }
                }
            });
        }
        
        remindersListDiv.addEventListener('click', function(event) {
             if (event.target.classList.contains('delete-reminder-btn') || event.target.closest('.delete-reminder-btn')) {
                const button = event.target.closest('.delete-reminder-btn');
                reminderIdToDelete = button.dataset.reminderId;
                const reminderTitle = button.dataset.reminderTitle;
                if(deleteReminderModalBody) deleteReminderModalBody.textContent = `Are you sure you want to delete the reminder: "${reminderTitle}"? This action cannot be undone.`;
                deleteConfirmBsModal.show();
            }
        });

        if (confirmDeleteReminderButton) {
            confirmDeleteReminderButton.addEventListener('click', async function() {
                if (!reminderIdToDelete) return;
                try {
                    const response = await fetch('/api/v1/reminders', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reminderId: reminderIdToDelete })
                    });
                    const result = await response.json();
                    if (!response.ok) {
                        if (response.status === 401) window.location.href = '/login';
                        throw new Error(result.message || 'Failed to delete reminder.');
                    }
                    displayApiMessage(result.message || 'Reminder deleted successfully!', 'success');
                    fetchAndDisplayReminders();
                } catch (error) {
                    console.error('Error deleting reminder:', error);
                    displayApiMessage(`Error: ${error.message}`, 'danger');
                } finally {
                    deleteConfirmBsModal.hide(); 
                    reminderIdToDelete = null;
                }
            });
        }
        
        if (confirmSignOutButton) {
             confirmSignOutButton.addEventListener('click', async () => {
                try {
                    const response = await fetch('/api/v1/logout', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const result = await response.json();
                    if (response.ok && result.success) {
                        window.location.href = '/login?message=' + encodeURIComponent(result.message || 'You have been logged out.');
                    } else {
                        alert('Logout failed: ' + (result.message || 'An unknown error occurred.'));
                    }
                } catch (error) {
                    console.error('Client-side error during logout:', error);
                    alert('An error occurred while trying to log out. Please check your connection and try again.');
                }
            });
        }
        
        function escapeHTML(str) {
            if (typeof str !== 'string') return '';
            const div = document.createElement('div');
            div.appendChild(document.createTextNode(str));
            return div.innerHTML;
        }

        fetchAndDisplayReminders();
    });
    </script>
</body>
</html>